import React, { useState, useEffect } from 'react';
import { Card, CardHeader, CardContent, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { ChevronLeft, ChevronRight, Calendar as CalendarIcon, User } from "lucide-react";
import { format, startOfMonth, endOfMonth, eachDayOfInterval, isSameMonth, isSameDay, addMonths, subMonths } from "date-fns";

const departmentColors = {
  Engineering: "bg-blue-500",
  Marketing: "bg-purple-500", 
  Sales: "bg-green-500",
  HR: "bg-orange-500",
  Finance: "bg-red-500",
  Operations: "bg-yellow-500",
  Design: "bg-pink-500",
  Legal: "bg-indigo-500"
};

export default function LeaveCalendar({ leaveRequests, compact = false }) {
  const [currentMonth, setCurrentMonth] = useState(new Date());
  const [selectedDate, setSelectedDate] = useState(null);

  const monthStart = startOfMonth(currentMonth);
  const monthEnd = endOfMonth(currentMonth);
  const daysInMonth = eachDayOfInterval({ start: monthStart, end: monthEnd });

  const getLeaveForDate = (date) => {
    return leaveRequests.filter(request => {
      if (request.status !== 'approved') return false;
      const startDate = new Date(request.start_date);
      const endDate = new Date(request.end_date);
      return date >= startDate && date <= endDate;
    });
  };

  const isBlackoutDate = (date) => {
    const day = date.getDate();
    const month = date.getMonth() + 1; // JavaScript months are 0-indexed
    
    // Single digit days (1-9) and their previous day
    if (day <= 9 || day === 10) return true; // 1-9 blocked, plus day before (so 10 is blocked as day before 9+1)
    
    // Promotion days and day before
    const promotionDates = [
      { month: 2, day: 2 }, // Feb 2
      { month: 3, day: 3 }, // Mar 3
      { month: 4, day: 4 }, // Apr 4
    ];
    
    for (const promo of promotionDates) {
      if (month === promo.month && (day === promo.day || day === promo.day - 1)) {
        return true;
      }
    }
    
    return false;
  };

  const navigateMonth = (direction) => {
    if (direction === 'prev') {
      setCurrentMonth(subMonths(currentMonth, 1));
    } else {
      setCurrentMonth(addMonths(currentMonth, 1));
    }
  };

  const selectedDateLeaves = selectedDate ? getLeaveForDate(selectedDate) : [];

  if (compact) {
    return (
      <Card className="bg-white border-slate-200">
        <CardHeader className="border-b border-slate-100">
          <div className="flex items-center justify-between">
            <CardTitle className="flex items-center gap-2">
              <CalendarIcon className="w-5 h-5 text-indigo-600" />
              {format(currentMonth, 'MMMM yyyy')}
            </CardTitle>
            <div className="flex gap-2">
              <Button
                variant="outline"
                size="icon"
                onClick={() => navigateMonth('prev')}
                className="rounded-xl h-8 w-8"
              >
                <ChevronLeft className="w-3 h-3" />
              </Button>
              <Button
                variant="outline"
                size="icon"
                onClick={() => navigateMonth('next')}
                className="rounded-xl h-8 w-8"
              >
                <ChevronRight className="w-3 h-3" />
              </Button>
            </div>
          </div>
        </CardHeader>
        <CardContent className="p-4">
          <div className="grid grid-cols-7 gap-1 mb-3">
            {['S', 'M', 'T', 'W', 'T', 'F', 'S'].map(day => (
              <div key={day} className="text-center text-xs font-semibold text-slate-500 py-1">
                {day}
              </div>
            ))}
          </div>
          <div className="grid grid-cols-7 gap-1">
            {daysInMonth.map(date => {
              const leavesForDay = getLeaveForDate(date);
              const isToday = isSameDay(date, new Date());
              const isBlocked = isBlackoutDate(date);
              
              return (
                <div
                  key={date.toISOString()}
                  className={`aspect-square p-1 rounded-lg border text-center relative text-xs ${
                    isToday 
                      ? 'bg-slate-100 border-slate-300' 
                      : isBlocked
                        ? 'bg-red-50 border-red-200'
                        : 'border-slate-200'
                  }`}
                >
                  <div className={`font-medium ${isBlocked ? 'text-red-500' : 'text-slate-900'}`}>
                    {format(date, 'd')}
                  </div>
                  {leavesForDay.length > 0 && (
                    <div className="absolute bottom-0.5 left-0.5 right-0.5 flex gap-0.5 justify-center">
                      {leavesForDay.slice(0, 2).map((leave, idx) => (
                        <div
                          key={idx}
                          className={`w-1 h-1 rounded-full ${departmentColors[leave.department] || 'bg-gray-400'}`}
                          title={`${leave.employee_name} (${leave.department})`}
                        />
                      ))}
                      {leavesForDay.length > 2 && (
                        <div className="text-xs text-slate-500">+</div>
                      )}
                    </div>
                  )}
                  {isBlocked && (
                    <div className="absolute inset-0 flex items-center justify-center">
                      <div className="w-0.5 h-0.5 bg-red-400 rounded-full opacity-50"></div>
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
      <div className="lg:col-span-2">
        <Card className="bg-white border-slate-200">
          <CardHeader className="border-b border-slate-100">
            <div className="flex items-center justify-between">
              <CardTitle className="flex items-center gap-2">
                <CalendarIcon className="w-5 h-5 text-indigo-600" />
                {format(currentMonth, 'MMMM yyyy')}
              </CardTitle>
              <div className="flex gap-2">
                <Button
                  variant="outline"
                  size="icon"
                  onClick={() => navigateMonth('prev')}
                  className="rounded-xl"
                >
                  <ChevronLeft className="w-4 h-4" />
                </Button>
                <Button
                  variant="outline"
                  size="icon"
                  onClick={() => navigateMonth('next')}
                  className="rounded-xl"
                >
                  <ChevronRight className="w-4 h-4" />
                </Button>
              </div>
            </div>
          </CardHeader>
          <CardContent className="p-6">
            <div className="grid grid-cols-7 gap-1 mb-4">
              {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (
                <div key={day} className="text-center text-sm font-semibold text-slate-500 py-2">
                  {day}
                </div>
              ))}
            </div>
            <div className="grid grid-cols-7 gap-1">
              {daysInMonth.map(date => {
                const leavesForDay = getLeaveForDate(date);
                const isToday = isSameDay(date, new Date());
                const isSelected = selectedDate && isSameDay(date, selectedDate);
                const isBlocked = isBlackoutDate(date);
                
                return (
                  <button
                    key={date.toISOString()}
                    onClick={() => setSelectedDate(date)}
                    className={`aspect-square p-1 rounded-lg border transition-all duration-200 relative ${
                      isSelected 
                        ? 'bg-indigo-100 border-indigo-300' 
                        : isToday 
                          ? 'bg-slate-100 border-slate-300'
                          : isBlocked
                            ? 'bg-red-50 border-red-200 hover:bg-red-100'
                            : 'border-slate-200 hover:bg-slate-50'
                    }`}
                  >
                    <div className={`text-sm font-medium ${isBlocked ? 'text-red-500' : 'text-slate-900'}`}>
                      {format(date, 'd')}
                    </div>
                    {leavesForDay.length > 0 && (
                      <div className="absolute bottom-1 left-1 right-1 flex gap-0.5 flex-wrap">
                        {leavesForDay.slice(0, 3).map((leave, idx) => (
                          <div
                            key={idx}
                            className={`w-1.5 h-1.5 rounded-full ${departmentColors[leave.department] || 'bg-gray-400'}`}
                            title={`${leave.employee_name} (${leave.department})`}
                          />
                        ))}
                        {leavesForDay.length > 3 && (
                          <div className="text-xs text-slate-500">+{leavesForDay.length - 3}</div>
                        )}
                      </div>
                    )}
                    {isBlocked && (
                      <div className="absolute top-1 right-1">
                        <div className="w-1.5 h-1.5 bg-red-400 rounded-full" title="Blackout date"></div>
                      </div>
                    )}
                  </button>
                );
              })}
            </div>
          </CardContent>
        </Card>
      </div>

      <div className="space-y-6">
        <Card className="bg-white border-slate-200">
          <CardHeader className="border-b border-slate-100">
            <CardTitle className="text-lg">
              {selectedDate ? format(selectedDate, 'MMM d, yyyy') : 'Select a date'}
            </CardTitle>
          </CardHeader>
          <CardContent className="p-6">
            {selectedDate ? (
              <>
                {isBlackoutDate(selectedDate) && (
                  <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded-lg">
                    <p className="text-red-700 text-sm font-medium">⚠️ Blackout Date</p>
                    <p className="text-red-600 text-xs mt-1">Leave requests not allowed on this date</p>
                  </div>
                )}
                {selectedDateLeaves.length > 0 ? (
                  <div className="space-y-3">
                    {selectedDateLeaves.map((leave) => (
                      <div key={leave.id} className="flex items-center gap-3 p-3 rounded-lg bg-slate-50 border border-slate-100">
                        <div className="w-8 h-8 rounded-full bg-gradient-to-br from-indigo-100 to-indigo-200 flex items-center justify-center">
                          <User className="w-4 h-4 text-indigo-600" />
                        </div>
                        <div className="flex-1 min-w-0">
                          <p className="font-semibold text-slate-900">{leave.employee_name}</p>
                          <div className="flex items-center gap-2 mt-1">
                            <Badge className={`${departmentColors[leave.department]} text-white text-xs`}>
                              {leave.department}
                            </Badge>
                            <span className="text-xs text-slate-500">
                              {format(new Date(leave.start_date), 'MMM d')} - {format(new Date(leave.end_date), 'MMM d')}
                            </span>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-center py-8">
                    <CalendarIcon className="w-12 h-12 text-slate-300 mx-auto mb-3" />
                    <p className="text-slate-500 font-medium">No one is on leave this day</p>
                  </div>
                )}
              </>
            ) : (
              <div className="text-center py-8">
                <p className="text-slate-500 font-medium">Click on a date to see who's on leave</p>
              </div>
            )}
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-indigo-500 to-purple-600 text-white border-0">
          <CardHeader>
            <CardTitle className="text-lg">Department Legend</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-2 gap-2 text-sm mb-4">
              {Object.entries(departmentColors).map(([dept, color]) => (
                <div key={dept} className="flex items-center gap-2">
                  <div className={`w-3 h-3 rounded-full ${color}`} />
                  <span className="text-indigo-100">{dept}</span>
                </div>
              ))}
            </div>
            <div className="border-t border-indigo-400 pt-3">
              <div className="flex items-center gap-2 text-sm">
                <div className="w-3 h-3 rounded-full bg-red-400" />
                <span className="text-indigo-100">Blackout Dates</span>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
